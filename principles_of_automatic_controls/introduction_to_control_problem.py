# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_introduction_to_control_problem.ipynb.

# %% auto 0
__all__ = ['draw_mass_spring_damper']

# %% ../nbs/03_introduction_to_control_problem.ipynb 49
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches

def draw_mass_spring_damper(position=0.5, force=1.0):
    fig, ax = plt.subplots(figsize=(10, 5))

    # Draw wall
    ax.plot([-1, -1], [0, 2], color='k', lw=10)
    ax.text(-1.2, 0.5, 'Wall', rotation='vertical', va='center')

    # Draw spring
    x_spring = np.linspace(-1, position, 100)
    y_spring = 1 + 0.1 * np.sin(10 * np.pi * x_spring)
    ax.plot(x_spring, y_spring, 'g', lw=2)
    ax.text(-0.5, 1.2, 'Spring', color='g', ha='center')

    # Draw damper
    damper_length = position + 1
    damper_rect_width = damper_length / 5.0
    damper_rect = patches.Rectangle((-1, 0.3), damper_rect_width, 0.4, linewidth=1, edgecolor='b', facecolor='white')
    ax.add_patch(damper_rect)
    ax.plot([-1 + damper_rect_width, position], [0.5, 0.5], 'b', lw=2)
    ax.plot([-1 + damper_rect_width * 1.5, -1 + damper_rect_width * 2], [0.3, 0.7], 'b', lw=2)
    ax.text(-0.5, 0.3, 'Damper', color='b', ha='center', va='top')

    # Draw mass (as cart)
    cart_rect = patches.Rectangle((position, 0.25), 1, 1.5, linewidth=1, edgecolor='r', facecolor='gray')
    ax.add_patch(cart_rect)
    ax.text(position + 0.5, 1, 'Mass', ha='center', va='center')

    # Draw Force
    ax.arrow(position + 1, 1, force, 0, head_width=0.1, head_length=0.1, fc='orange', ec='orange')
    ax.text(position + 1 + force/2, 1.2, 'F', color='orange', ha='center')

    # Draw displacement
    ax.arrow(0.5, 0.1, position, 0, head_width=0.1, head_length=0.1, fc='purple', ec='purple')
    ax.text(0.6, 0.15, 'x', color='purple', ha='center')

    ax.set_xlim(-2, 3 + force)
    ax.set_ylim(0, 2)
    ax.axis('off')
    plt.show()

draw_mass_spring_damper(position=0.5, force=1.0)

